Advantages of jMock 2 over jMock 1
==================================

* Uses real method calls, not strings: can refactor more easily and
  autocomplete in the IDE.
* Customisation by delegation, not by inheritance
* Many more plugin-points for customisation
* Independent of any testing framework: compatability with the testing
  framework is a plugin-point.
* Can mock concrete classes *without* calling their constructors (if
  you really want to).
* Uses Hamcrest matchers, so can use a large and ever-growing library
  of matchers in expectations.
* Expectations match in FIFO order, so tests are easier to understand


How to get up and running
=========================

You will need to add the jmock-2.0.0.jar to your classpath.  Also
add the appropriate integration JAR to your classpath to integrate
jMock 2 with the test framework you use.  For example, if you use
TestNG, add jmock-testng-2.0.0.jar to your classpath.  If you want
to mock concrete classes with the UnsafeHackConcreteClassImposteriser
add CGLIB, ASM and jmock-nonstd-2.0.0.jar to your classpath.

You will also need to add Hamcrest to your classpath.  
