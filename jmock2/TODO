Functionality
=============

- wording of nested expectation groups

- write a test for a()/an()

- pull out a cardinality constraint?


Build
=====

- Publish snapshots somewhere


Hamcrest
========

- Doesn't work with flexible expectations: throws ClassCastExceptions
   - need to make all matchers take an Object argument
   - wrap Matcher<Object> objects in statically typed decorators

	  @Suppress("unchecked")
	  Matcher<T> restrict(Matcher<U super T> matcher) {
	  	return (Matcher<T>)matcher;
	  }
	  