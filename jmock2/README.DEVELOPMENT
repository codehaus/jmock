Development rules:
------------------


Here are some rules that we follow when developing jMock:

 * Never check in a class without associated unit tests.

 * Never check a failing unit test into the CVS repository.

 * Acceptance tests may fail. A failing acceptance test indicates
   something that needs to be done: a todo item, feature request or
   bug report, for example. It's ok to check a failing acceptance test
   into the CVS repository.

 * Separate acceptance  and unit tests. Make  it easy to  run only the
   unit tests so that we can check that they pass before committing,
   even when acceptance tests are failing.

 * Resolve and remove all TODO comments before checking in.

 * Avoid the following words in class names and other identifiers:
   Helper, Impl (or a derivative), Manager.

 * Follow the Sun: use Sun's coding conventions for Java1.

 * Use the TestDox2 naming conventions for unit tests.


Architectural Constraints:
--------------------------

* No dependency on any specific test framework.

That means, don't use JUnit Assert.assertBlahBlah to check expectations.
Throw ExpectationError to report a violated expectation.
Throw some kind of RuntimeException to report programming errors in the
use of the framework.  E.g. trying to set up an expectation to return a 
result of the wrong type.


Package Structure:
------------------

org.jmock		
	DSL-style API (compatability guarantees)

org.jmock.api      
	Interfaces, value classes and exceptions defining plug-in API 
	(compatability guarantees)

org.jmock.lib		
	Convenient classes that implement the APIs in the core, are used 
	by the DSL-style API, and can be used in user-defined APIs 
	(compatability guarantees)

org.jmock.lib.nonstd	
	Lib classes that rely on clever hacks or otherwise cannot be 
	guaranteed to always work in all JVMs.
	(no guarantees, use at your own risk).

org.jmock.internal
	Internal implementation details (no guarantees)

org.jmock.integration	
	Classes integrating jMock with different testing APIs, such 
	as JUnit 3.x, JUnit 4.x and TestNG. 
	(compatability guarantees)
	
org.jmock.test
	Tests for jMock itself (no guarantees)



Plug-in Points:
---------------

Matcher:
	Controls the matching of invocations to expectations
Action:
	Performs an action in response to an invocation
Imposteriser:
	Wraps mock objects in an adapter of the correct type
Expectation:
	Matches an invocation and fakes its behaviour
ExpectationErrorTranslator: 
	Translates expectation errors into error type used by a specific 
	testing framework.
MockObjectNamingScheme:
    Creates names for mock objects based on the mocked type.
