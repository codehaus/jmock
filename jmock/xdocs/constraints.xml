<document>

    <properties>
        <title>Parameter Constraints</title>
    </properties>

    <body>

        <section name="Paramater Constraints">
            <p>To avoid over specific tests, jMock lets the programmer specify
                <i>constraints</i> over the actual
            parameters to a call, rather than just test for equality against expected values.
            </p>

            <p>A constraint is an object that implements the
                <a href="xref/org/jmock/Constraint.html">Constraint</a> interface. It must do two things:
            </p>
            <ul>
                <li>report whether a parameter value meets the constraint (the
                    <code>eval</code> method).
                </li>
                <li>provide a good description of the constraint that it is testing to be included in test failure messages (the
                    <code>toString</code> method).
                </li>
            </ul>

            <p>The
                <a href="xref/org/jmock/constraint/package-summary.html">org.jmock.constraint</a> package contains many constraint implementations and
                the programmer can easily specify their own constraints by writing their own implementation(s) of the
                <a href="xref/org/jmock/Constraint.html">Constraint</a> interface.
            </p>
        </section>

        <section name="The 'C' Class">

            <p>Because expressions that instantiate arrays of constraints can become rather lengthy, static factory methods with terse names that create
            different constraint objects are implemented in the
                <a href="xref/org/jmock/C.html">C</a> class.  For example, the following expression:
            </p>

<source><![CDATA[new Constraint[] {
    new IsEqual(new Integer(0)),
    new IsEqual("hello, world"),
    new IsEqual(new Double(0.0))
};]]></source>

            <p>Can be replaced by:</p>

            <source><![CDATA[C.args( C.eq(new Integer(0)), C.eq("hello, world"), C.eq(new Double(0.0)) );]]></source>

            <p>Or even:</p>

            <source><![CDATA[C.eq( new Integer(0), "hello, world", new Double(0.0) );]]></source>

        </section>

        <section name="Sugar Methods">

        <p>Because the most common constraint is that the parameter value must be equal to an expected value, the
        <a href="xref/org/jmock/Mock.html">Mock</a> class has sugar methods to add expectations and matches against expected values.  For example:</p>

        <source><![CDATA[mock.expectVoid( "methodName", new Object[]{new Integer(0),"hello, world",new Double(0.0)} );]]></source>

        <p>Methods with one argument do not need to create an object array, and are overloaded on all primitive types:</p>

        <source><![CDATA[mock.expectVoid( "oneArg", 0.0 );]]></source>
        </section>
        
        <section name="Writing Custom Constraints">

        <p>Although not very common, it is occasionally necessary to write new constraints.  One situation in which 
        this is useful is to test the events fired by an object.  Because the event source creates a new event object
        for each event it fires, a test cannot compare an expected event object for equality against an actual event 
        object.  Instead, the programmer can write a custom constraint that tests whether the fields of the event have the expected values.</p>

        <p>To create a new constraint, write a class that implements the 
        <a href="xref/org/jmock/Constraint.html">Constraint</a> interface, implements the <code>eval</code> method 
        and returns a readable description from the <code>toString</code> method.  Here is a simple example:</p>

<source><![CDATA[import org.jmock.Constraint;

class StartsWith implements Constraint {
    private String prefix;

    public StartsWith( String prefix ) {
        this.prefix = prefix;
    }

    public boolean eval( Object o ) {
        return o instanceof String && ((String)o).startsWith(prefix);
    }

    public String toString() {
        return "a string starting with \"" + prefix + "\"";
    }
}]]></source>

        </section>
    </body>
</document>