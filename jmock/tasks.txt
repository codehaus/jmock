*** Stuff done ***

- Clean src tree. src/java, src/test and src/functional.
- Mavenified project.
- Shifted everything from com.mockobjects to org.jmock.
- Moved old expectation classes to org.jmock.expectation package.
- Separated stubs into their own package.
- Reformatted code and optimized imports.
- Added BSD-like license in LICENSE.txt and headers in all Java files.
- Moved important classes to root org.jmock package.
- Cleaned up test cases to remove pre junit 3.x fluff.
- Added maven reports to website.
- Create welcome page.
- Make it simpler to add custom stubs (for side-effects).
- Follow coding convention in constraint classes
- Convert calculator example to use "builder" API.

*** Stuff to do ***

Organisation:
-Get a logo.
-Setup Jira.
-Update developers/contributors/cvs/mailing-list maven details.

Code:
-JavaDoc all classes in root org.jmock package.
-Find cool new name for "builder" API
-write java.util.MockObjectsTestCase class with convenience methods that delegate to C class
-Clean up org.jmock.expecation package.
-Make jmock.expectation package use Constraints instead of calling equals on expected value
-DO SOMETHING WITH THE EMPTY TEST CLASSES IN test.jmock.dynamic
-Implement matchers for call ordering.
-Remove PMD violations
-REMOVE ALL TODO: COMMENTS

(sensible defaults reduce test brittleness)
-TODO: Sensible default: If no expectation/match setup, invocation should produce no-op instead of fail.
-TODO: ExpectNotCalled (or equivalent) makes tests more expressive.


*** Suggested improvements ***

(sensible defaults reduce test brittleness)
- Sensible default: When no args specified in Mock, use ANY-args instead of NO-args.
  -- I disagree: if you allow any arguments, putting C.ANY_ARGS shows what you are doing and isn't
     particularly verbose
- Extract interface from Invocation.
  -- WHY? It's a pure value object with no behaviour.
